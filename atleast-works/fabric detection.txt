import numpy as np
import cv2
import streamlit as st

# Creating title for Streamlit app
st.title("Fabric Defect Detection with OpenCV")

# Open a video capture stream (you can replace 0 with the path to your video file)
cap = cv2.VideoCapture(0)

while True:
    # Read a frame from the video stream
    ret, frame = cap.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Blur the grayscale frame
    blur = cv2.blur(gray, (10, 10))

    # Apply fastNlMeansDenoising
    dst = cv2.fastNlMeansDenoising(blur, None, 10, 7, 21)

    # Apply thresholding
    _, binary = cv2.threshold(dst, 127, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Apply erosion
    kernel = np.ones((5, 5), np.uint8)
    erosion = cv2.erode(binary, kernel, iterations=1)

    # Apply dilation
    dilation = cv2.dilate(binary, kernel, iterations=1)

    if (dilation == 0).sum() > 1:
        contours, _ = cv2.findContours(
            dilation, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE
        )
        for i in contours:
            if cv2.contourArea(i) < 261121.0:
                cv2.drawContours(frame, i, -1, (0, 0, 255), 3)
            cv2.putText(
                frame,
                "Defective Fabric",
                (30, 40),
                cv2.FONT_HERSHEY_SIMPLEX,
                1,
                (0, 0, 255),
                2,
            )
    else:
        cv2.putText(
            frame,
            "Good Fabric",
            (30, 40),
            cv2.FONT_HERSHEY_SIMPLEX,
            1,
            (0, 0, 255),
            2,
        )

    # Display the webcam feed with the processed overlay
    st.image(frame, channels="BGR", use_column_width=True)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# Release the video capture object
cap.release()
cv2.destroyAllWindows()
